- name: Create ton dirs (RUST)
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ton_node_user }}"
    group: "{{ ton_node_group }}"
    mode: u=rwx,g=rx,o=
  loop:
    - "{{ ton_node_src_dir }}"
    - "{{ ton_node_contracts_dir }}"
    - "{{ ton_node_keys }}"
    - "{{ ton_node_scripts }}"
    - "{{ ton_node_election }}"
    - "{{ ton_node_election_history }}"
    - "{{ ton_rnode_work_dir }}"
    - "{{ ton_rnode_log_dir }}"
    - "{{ ton_rnode_config_dir }}"
    - "{{ ton_rnode_db_dir }}"
  when: install_rustnode

# - name: Create ton dirs (C)
#   file:
#     path: "{{ item }}"
#     state: directory
#     owner: "{{ ton_node_user }}"
#     group: "{{ ton_node_group }}"
#     mode: u=rwx,g=rx,o=
#   loop:
#     - "{{ ton_node_src_dir }}"
#     - "{{ ton_node_contracts_dir }}"
#     - "{{ ton_node_keys }}"
#     - "{{ ton_node_scripts }}"
#     - "{{ ton_node_election }}"
#     - "{{ ton_cnode_log_dir }}"
#     - "{{ ton_cnode_work_dir }}"
#     - "{{ ton_cnode_config_dir }}"
#   when: install_cnode

- name: Set chmod to directories for compatibility
  file:
    path: "{{ item }}"
    owner: "{{ ton_node_user }}"
    group: "{{ ton_node_group }}"
    mode: '0770'
  loop:
    - "{{ ton_node_scripts }}"
    - "{{ ton_node_election }}"

- name: Create freeton keys dir
  file:
    path: "{{ ton_node_keys }}"
    state: directory
    owner: "{{ ton_node_user }}"
    group: "{{ ton_node_group }}"
    mode: u=rwx,g=rx,o=

- name: Include os specific tasks
  include_tasks: "{{ ansible_pkg_mgr }}.yml"

- name: Stats libzstd.so
  stat:
    path: "/usr/local/lib/libzstd.so.{{ zstd_version }}"
  register: libzstd_exists

- name: Download and extract zstd sources
  unarchive:
    src: 'https://github.com/facebook/zstd/releases/download/v{{ zstd_version }}/zstd-{{ zstd_version }}.tar.gz'
    dest: /usr/local/src
    remote_src: yes
  when: not libzstd_exists.stat.exists

- name: Compile zstd
  command: 'make install'
  args:
    chdir: '/usr/local/src/zstd-{{ zstd_version }}'
  when: not libzstd_exists.stat.exists

- name: Download Rust init
  get_url:
    url: '{{ rustup_mirror }}/{{ rustup_platform }}/rustup-init'
    dest: '/usr/local/bin/rustup-init'
    mode: u=rwx,g=rx,o=

- name: Install Rust
  command: '/usr/local/bin/rustup-init -y --default-toolchain {{ rustup_default_toolchain }}'

- name: Get Rust version
  command: '{{ ansible_env.HOME }}/.cargo/bin/rustc -V'
  changed_when: false
  register: rust_version

- name: Get ton node sources
  git:
    repo: "{{ ton_node_github_repo }}"
    dest: "{{ ton_node_src_dir }}/ton_rnode"
    version: "{{ ton_node_github_commit_id }}"
    force: true
  register: ton_node_sources
  when: ton_node_config != "rfld"

- name: Get rfld ton node sources
  git:
    repo: "{{ ton_node_github_repo_rfld }}"
    dest: "{{ ton_node_src_dir }}/ton_rnode"
    version: "{{ ton_node_github_rfld_commit_id }}"
    force: true
  register: ton_node_sources_rfld
  when: ton_node_config == "rfld"


- name:  Ton node add features
  blockinfile: 
    path: "{{ ton_node_src_dir }}/ton_rnode/Cargo.toml"
    marker: "### ANSIBLE BLOCKINFILE 1 ####"
    insertafter: '\[features\]'
    block:  |
      sha2-native = ['sha2/asm', 'ed25519-dalek/asm']

- name:  Ton node add dependencies
  blockinfile: 
    path: "{{ ton_node_src_dir }}/ton_rnode/Cargo.toml"
    marker: "### ANSIBLE BLOCKINFILE 2 ####"
    insertafter: '\[dependencies\]'
    block:  |
      ed25519-dalek = '1.0'

- name: Get ton node tools sources
  git:
    repo: "{{ ton_node_tools_github_repo }}"
    dest: "{{ ton_node_src_dir }}/ton_node_tools"
    version: "{{ ton_node_tools_github_commit_id }}"
  register: ton_node_tools_sources

- name: Get tonos cli sources
  git:
    repo: "{{ tonos_cli_github_repo }}"
    dest: "{{ ton_node_src_dir }}/tonos_cli"
    version: "{{ tonos_cli_github_commit_id }}"
  register: tonos_cli_sources

- name: Get tvm linker sources
  git:
    repo: "{{ tvm_linker_github_repo }}"
    dest: "{{ ton_node_src_dir }}/tvm_linker"
    version: "{{ tvm_linker_github_commit_id }}"
    force: yes
  register: tvm_linker_sources

- name: Clear debug directory
  file:
    path: "{{ ton_node_src_dir }}/debug"
    state: absent

- name: Build ton node
  block:
    - name: Update repo deps for freeton node
      command: '{{ ansible_env.HOME }}/.cargo/bin/cargo update --manifest-path {{ ton_node_src_dir }}/ton_rnode/Cargo.toml'
    - name: Build repo | freeton node
      command: '{{ ansible_env.HOME }}/.cargo/bin/cargo build --manifest-path {{ ton_node_src_dir }}/ton_rnode/Cargo.toml --target-dir {{ ton_node_src_dir }} --release{% if ton_rnode_metrics_enabled == true %} --features metrics{% endif %}{% if ton_rnode_compression_enabled == true %} --features compression{% endif %}{% if ton_rnode_external_db_enabled == true %} --features external_db{% endif %}'
  when: ton_node_sources.changed or ton_node_force_recompile
  environment:
    RUSTFLAGS: "{{ rust_flags }}"
    RUST_VERSION: "{{ rust_version.stdout }}"
    GC_TON_NODE: "{{ ton_node_sources.after }}"
    ZSTD_LIB_DIR: "{% if ansible_pkg_mgr == 'dnf' %}/usr/lib64{% elif ansible_pkg_mgr == 'apt' %}/usr/lib/x86_64-linux-gnu{% endif %}"
    PKG_CONFIG_PATH: /usr/local/lib/pkgconfig

- name: Build ton node (groth16 support)
  block:
    - name: Update repo deps for freeton node
      command: '{{ ansible_env.HOME }}/.cargo/bin/cargo update --manifest-path {{ ton_node_src_dir }}/ton_rnode/Cargo.toml'
    - name: Build repo | freeton node
      command: '{{ ansible_env.HOME }}/.cargo/bin/cargo build --manifest-path {{ ton_node_src_dir }}/ton_rnode/Cargo.toml --target-dir {{ ton_node_src_dir }} --release{% if ton_rnode_metrics_enabled == true %} --features metrics{% endif %}{% if ton_rnode_compression_enabled == true %} --features compression{% endif %}{% if ton_rnode_external_db_enabled == true %} --features external_db{% endif %}'
  when: ton_node_sources_rfld.changed or ton_node_rfld_force_recompile
  environment:
    RUSTFLAGS: "{{ rust_flags }}"
    RUST_VERSION: "{{ rust_version.stdout }}"
    GC_TON_NODE: "{{ ton_node_sources_rfld.after }}"
    ZSTD_LIB_DIR: "{% if ansible_pkg_mgr == 'dnf' %}/usr/lib64{% elif ansible_pkg_mgr == 'apt' %}/usr/lib/x86_64-linux-gnu{% endif %}"
    PKG_CONFIG_PATH: /usr/local/lib/pkgconfig

- name: Build ton node tools
  block:
    - name: Update repo deps | node tools
      command: '{{ ansible_env.HOME }}/.cargo/bin/cargo update --manifest-path {{ ton_node_src_dir }}/ton_node_tools/Cargo.toml'
    - name: Build repo | node tools
      command: '{{ ansible_env.HOME }}/.cargo/bin/cargo build --manifest-path {{ ton_node_src_dir }}/ton_node_tools/Cargo.toml --target-dir {{ ton_node_src_dir }} --release'
  when: ton_node_tools_sources.changed or ton_node_tools_force_recompile
  environment:
    RUSTFLAGS: "{{ rust_flags }}"

- name: Build tonos cli
  block:
    - name: Update repo deps | tonos cli
      command: '{{ ansible_env.HOME }}/.cargo/bin/cargo update --manifest-path {{ ton_node_src_dir }}/tonos_cli/Cargo.toml'
    - name: Build repo | tonos cli
      command: '{{ ansible_env.HOME }}/.cargo/bin/cargo build --manifest-path {{ ton_node_src_dir }}/tonos_cli/Cargo.toml --target-dir {{ ton_node_src_dir }} --release'
  when: tonos_cli_sources.changed or tonos_cli_force_recompile
  environment:
    RUSTFLAGS: "{{ rust_flags }}"

- name: Build tvm linker
  block:
    - name: Update repo deps | tvm linker
      command: '{{ ansible_env.HOME }}/.cargo/bin/cargo update --manifest-path {{ ton_node_src_dir }}/tvm_linker/tvm_linker/Cargo.toml'
    - name: Build repo | tvm linker
      command: '{{ ansible_env.HOME }}/.cargo/bin/cargo build --manifest-path {{ ton_node_src_dir }}/tvm_linker/tvm_linker/Cargo.toml --target-dir {{ ton_node_src_dir }} --release'
  when: tvm_linker_sources.changed or tvm_linker_force_recompile
  environment:
    RUSTFLAGS: "{{ rust_flags }}"